#!/usr/bin/env bash

echo $0 >> /tmp/todo.log
echo "$@" >> /tmp/todo.log
env >> /tmp/todo.log

FILE="$HOME/.todos.json"
[ ! -f "$FILE" ] && echo "[]" > "$FILE"

add_todo() {
  title="$1"
  jq '. += [{"title":"'"$title"'","status":"doing"}]' "$FILE" > tmp && mv tmp "$FILE"
  echo "Added: $title"
}

list_todos() {
  while true; do
    total=$(jq 'length' "$FILE")
    left=$(jq '[.[] | select(.status != "done")] | length' "$FILE")
    summary="[${left} left / ${total} total] - [↵ toggle, d/x delete, esc quit]"

    mapfile -t items < <(
      jq -r '.[] | 
        if .status == "done" 
        then "✅ \(.title)"
        else "⬜ \(.title)"
        end' "$FILE"
    )

    if [ ${#items[@]} -eq 0 ]; then
      echo "No todos left."
      return
    fi

    # Display summary/help line on top + list
    result=$( (echo "$summary"; printf "%s\n" "${items[@]}") | fzf --ansi --expect d,x)

    key=$(head -1 <<< "$result")
    selected=$(tail -n +2 <<< "$result")

    # Skip summary line if selected
    if [ "$selected" = "$summary" ]; then
      continue
    fi

    # If user pressed ESC or nothing selected, break
    [ -z "$selected" ] && break

    title=$(echo "$selected" | sed 's/^✅ //' | sed 's/^⬜ //')
    index=$(jq -r 'to_entries[] | select(.value.title == "'"$title"'") | .key' "$FILE")

    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
      echo -e "\e[33mWarning: could not find index for '$title'\e[0m"
      continue
    fi

    case "$key" in
      d|x)
        jq 'del(.['"$index"'])' "$FILE" > tmp && mv tmp "$FILE"
        echo -e "\e[31mDeleted '$title'.\e[0m"
        ;;
      *)
        current_status=$(jq -r '.['"$index"'].status' "$FILE")
        if [ "$current_status" == "done" ]; then
          new_status="doing"
        else
          new_status="done"
        fi
        jq '.['"$index"'].status = "'"$new_status"'"' "$FILE" > tmp && mv tmp "$FILE"
        echo -e "\e[32mToggled '$title' to $new_status.\e[0m"
        ;;
    esac
  done
}


mark_as_done() {
  index=$(( $1 - 1 ))
  jq '.[ '"$index"' ].status = "done"' "$FILE" > tmp && mv tmp "$FILE"
  echo "Marked todo $1 as done."
}

delete_todo() {
  index=$(( $1 - 1 ))
  jq 'del(.[ '"$index"' ])' "$FILE" > tmp && mv tmp "$FILE"
  echo "Deleted todo $1."
}

clear_todos() {
  echo "[]" > "$FILE"
  echo "Todos cleared."
}

summary_waybar() {
  if [ ! -f "$FILE" ]; then
    echo "0"
    return
  fi

  count=$(jq '[.[] | select(.status != "done")] | length' "$FILE")

  if [ "$count" -eq 0 ]; then
    echo "0"
  else
    printf "$count"
  fi
}


case "$1" in
  add) shift; add_todo "$1" ;;
  list) list_todos ;;
  done) shift; mark_as_done "$1" ;;
  delete) shift; delete_todo "$1" ;;
  clear) clear_todos ;;
  summary-waybar) summary_waybar ;;
  *)
    echo "Usage: $0 <add|list|done|delete|clear> [args]"
    ;;
esac
